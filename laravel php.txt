
https://www.youtube.com/watch?v=YaT5OgDfhMk


LARAVEL:
->Laravel is a powerful MVC PHP framework, designed for a simple and 
elegant toolkit to create full-featured web applications.
->Laravel is a MVC framework with bundles, migrations, and Artisan CLI.
->it incorporates many of the best features of frameworks like CodeIgniter, Yii,
ASP.NET MVC, Ruby on Rails, Sinatra, and others.
->it increases speed of web pplications,savestime,it also prevents from attacks and very secure.

Laravel – Features
Laravel offers the following key features -

Modularity
Testability
Routing
Configuration management
Query builder and ORM (Object Relational Mapper)
Schema builder, migrations, and seeding
Template engine
E-mailing
Authentication
Redis
Queues
Event and command bus

Root Directory:
app - This directory contains the core code of the application.

bootstrap - This directory contains the application bootstrapping script.

config - This directory contains configuration files of application.

database - This folder contains your database migration and seeds.

public - This is the application’s document root. It starts the Laravel application. It also contains the assets of the application like JavaScript, CSS, Images, etc.

resources - This directory contains raw assets such as the LESS & Sass files, localization and language files, and Templates that are rendered as HTML.

storage - This directory contains App storage, like file uploads etc. Framework storage (cache), and application-generated logs.

test - This directory contains various test cases.

vendor - This directory contains composer dependencies

Basic Routing

Basic routing is meant to route your request to an appropriate controller. The routes of the application can be defined in app/Http/routes.php file
Route::get('/', function () {
   return 'Hello World';
});

Route::post('foo/bar', function () {
   return 'Hello World';
});

Route::put('foo/bar', function () {
   //
});

Route::delete('foo/bar', function () {
   //
});

example:
app/Http/routes.php

<?php
Route::get('/', function () {
   return view('welcome');
});

Routing Parameters:
Required Parameters:this must be in url.
Route::get('ID/{id}',function($id){
   echo 'ID: '.$id;
});
Optional Parameters:
Route::get('/user/{name?}',function($name = 'Virat'){
   echo "Name: ".$name;
});

example:
<?php

// First Route method – Root URL will match this method
Route::get('/', function () {
   return view('welcome');
});

// Second Route method – Root URL with ID will match this method
Route::get('ID/{id}',function($id){
   echo 'ID: '.$id;
});

// Third Route method – Root URL with or without name will match this method
Route::get('/user/{name?}',function($name = 'Virat Gandhi'){
   echo "Name: ".$name;
});
MIDDLEWARE:

Middleware acts as a middle man between request and response.It is a type of filtering mechanism.

Register Middleware:
We need to register each and every middleware before using it. There are two types of Middleware in Laravel.

Global Middleware
Route Middleware
The Global Middleware will run on every HTTP request of the application, whereas the Route Middleware will be assigned to a specific route.
 The middleware can be registered at app/Http/Kernel.php. This file contains two properties $middleware and $routeMiddleware.
 $middleware property is used to register Global Middleware and $routeMiddleware property is used to register route specific middleware.

To register the global middleware, list the class at the end of $middleware property.

protected $middleware = [
   \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
   \App\Http\Middleware\EncryptCookies::class,
   \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
   \Illuminate\Session\Middleware\StartSession::class,
   \Illuminate\View\Middleware\ShareErrorsFromSession::class,
   \App\Http\Middleware\VerifyCsrfToken::class,
];
To register the route specific middleware, add the key and value to $routeMiddleware property.

protected $routeMiddleware = [
   'auth' => \App\Http\Middleware\Authenticate::class,
   'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
   'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
];
MIDDLE WARE PARAMETERS:

We can also pass parameters with the Middleware. For example, if your application has different roles like user, 
admin, super admin etc. and you want to authenticate the action based on role, this can be achieved by passing parameters 
with middleware. The middleware that we create contains the following function and we can pass our custom argument after the $next argument.

public function handle($request, Closure $next) {
   return $next($request);
}
Terminable Middleware:

Terminable middleware performs some task after the response has been sent to the browser. This can be accomplished by 
creating a middleware with “terminate” method in the middleware. Terminable middleware should be registered with global middleware. 
The terminate method will receive two arguments $request and $response.

Laravel - Controllers:

In MVC framework, the letter ‘C’ stands for Controller. It acts as a directing traffic between Views and Models.

Creating a Controller
Open the command prompt or terminal based on the operating system you are using and type the following 
command to create controller using the Artisan CLI (Command Line Interface).

php artisan make:controller <controller-name> --plain
Replace the <controller-name> with the name of your controller. This will create a plain constructor as 
we are passing the argument — plain. If you don’t want to create a plain constructor, you can simply ignore the argument. 
The created constructor can be seen at app/Http/Controllers. You will see that some basic coding has already been done 

for you and you can add your custom coding. The created controller can be called from routes.php by the following syntax.

Syntax
Route::get(‘base URI’,’controller@method’);

Restful Resource Controllers:

Often while making an application we need to perform CRUD (Create, Read, Update, Delete) operations. 
Laravel makes this job easy for us. Just create a controller and Laravel will automatically provide all the methods for the CRUD operations.
 You can also register a single route for all the methods in routes.php file

Implicit Controllers:
Implicit Controllers allow you to define a single route to handle every action in the controller.
 You can define it in route.php file with Route:controller method

Retrieving the Request URI:

The “path” method is used to retrieve the requested URI. The “is” method is used to retrieve the requested URI which matches the particular 
pattern specified in the argument of the method. To get the full URL, we can use the “url” method.

Retrieving Input
The input values can be easily retrieved in Laravel. No matter what method was used “get” or “post”, 
the Laravel method will retrieve input values for both the methods the same way. There are two ways we can retrieve the input values.

Using the input() method
Using the properties of Request instance
Using the input() method
The input() method takes one argument, the name of the field in form. For example, 
if the form contains username field then we can access it by the following way.

$name = $request->input('username');
Using the properties of Request instance
Like the input() method, we can get the username property directly from the request instance.

Creating Cookie:

Cookie can be created by global cookie helper of Laravel. It is an instance of Symfony\Component\HttpFoundation\Cookie.
$request->username
->Cookie() method will take 3 arguments. First argument is the name of the cookie, second argument
 is the value of the cookie and the third argument is the duration of the cookie after which the cookie will get deleted automatically.


$response->withCookie(cookie()->forever('name', 'value'));
Retrieving Cookie:

Once we set the cookie, we can retrieve the cookie by cookie() method. 
This cookie() method will take only one argument which will be the name of the cookie. 
The cookie method can be called by using the instance of Illuminate\Http\Request.

//’name’ is the name of the cookie to retrieve the value of
$value = $request->cookie('name');

<?php
namespace App\Http\Controllers;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use App\Http\Requests;
use App\Http\Controllers\Controller;

class CookieController extends Controller {
   public function setCookie(Request $request){
      $minutes = 1;
      $response = new Response('Hello World');
      $response->withCookie(cookie('name', 'virat', $minutes));
      return $response;
   }
   public function getCookie(Request $request){
      $value = $request->cookie('name');
      echo $value;
   }
}
Views:

In MVC framework, the letter “V” stands for Views. It separates the application logic and the presentation logic. 
Views are stored in resources/views directory.
 Generally, the view contains the HTML which will be served by the application

example:

<?php
namespace App\Providers;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider {
   
   /**
   * Bootstrap any application services.
   *
   * @return void
   */

   public function boot(){
      view()->share('name', 'Virat Gandhi');
   }

   /**
   * Register any application services.
   *
   * @return void
   */

   public function register(){
      //
   }
}

Blade Templates
Blade is a simple, yet powerful templating engine provided with Laravel. Blade is Laravel's lightweight template language and its syntax is very easy to learn.
 A blade template contains extension — blade.php and is stored at resources/views.
html>
   
   <head>
      <title>@yield('title')</title>
   </head>
   
   <body>
      @section('sidebar')
      This is the master sidebar.
      @show
      
      <div class = "container">
         @yield('content')
      </div>
   
   </body>
</html>
Here, in the master template,

@yield('title') is used to display the value of the title

@section('sidebar') is used to define a section named sidebar

@show is used to display the contents of a section

@yield('content') is used to display the contents of content
Redirecting to Named Routes
Named route is used to give specific name to a route. The name can be assigned using the “as” array key.

Route::get('user/profile', ['as' => 'profile', function () {
   //
}]);
Connecting to Database:

Laravel has made processing with database very easy. Laravel currently supports following 4 databases -

MySQL
Postgres
SQLite
SQL Server

For local environment the value of APP_DEBUG should be true but for production it needs to be set to false to hide errors.
Logging
Logging is an important mechanism by which system can log errors that are generated. It is useful to improve the reliability of the system. Laravel supports different logging modes like single, daily, syslog, and errorlog modes. You can set these modes in config/app.php file.

'log' => 'daily'
You can see the generated log entries in storage/logs/laravel.log file.

Opening a Form
{{ Form::open(array('url' => 'foo/bar')) }}
   //
{{ Form::close() }}
Generating a Label Element
echo Form::label('email', 'E-Mail Address');
Generating a Text Input
echo Form::text('username');
Specifying a Default Value
echo Form::text('email', 'example@gmail.com');
Generating a Password Input
echo Form::password('password');
Generating a File Input
echo Form::file('image');
Generating a Checkbox Or Radio Input
echo Form::checkbox('name', 'value');
echo Form::radio('name', 'value');
Generating a Checkbox Or Radio Input That Is Checked
echo Form::checkbox('name', 'value', true);
echo Form::radio('name', 'value', true);
Generating a Drop-Down List
echo Form::select('size', array('L' => 'Large', 'S' => 'Small'));
Generating A Submit Button
echo Form::submit('Click Me!');
Example
Step 1 - Create 3 files for languages — English, French, and German. Save English file at resources/lang/en/lang.php

<?php
   return [
      'msg' => 'Laravel Internationalization example.'
   ];
?>
Step 2 - Save French file at resources/lang/fr/lang.php.

<?php
   return [
      'msg' => 'Exemple Laravel internationalisation.'
   ];
?>
Step 3 - Save German file at resources/lang/de/lang.php.

<?php
   return [
      'msg' => 'Laravel Internationalisierung Beispiel.' 
   ];
?>
sessions:

Sessions are used to store information about the user across the requests. Laravel provides various drivers like file, cookie, apc, array, Memcached, Redis, and database to handle session data. By default, file driver is used because it is lightweight. Session can be configured in the file stored at config/session.php.

Accessing Session Data
To access the session data, we need an instance of session which can be accessed via HTTP request. After getting the instance, we can use the get() method, which will take one argument, “key”, to get the session data.

$value = $request->session()->get('key');
You can use all() method to get all session data instead of get() method.

Storing Session Data
Data can be stored in session using the put() method. The put() method will take two arguments, the “key” and the “value”.

$request->session()->put('key', 'value');
Deleting Session Data
The forget() method is used to delete an item from the session. This method will take “key” as the argument.

$request->session()->forget('key');
Use flush() method instead of forget() method to delete all session data. Use the pull() method to retrieve data 
from session and delete it afterwards. The pull() method will also take “key” as the argument. The difference between the forget() and the pull() method is that forget() method will not return the 
value of the session and pull() method will return it and delete that value from session.


SEND EMAIL:

Laravel uses free feature-rich library “SwiftMailer” to send emails. 
Using the library function, we can easily send emails without too many hassles. 

Syntax
Mail::send([‘text’=>’text.view’], $data, $callback);

SECURITY:

Security is important feature while designing web applications. It assures the users of the website 
that their data is secured. Laravel provides various mechanisms to secure website. Some of the features are listed below -

Storing Passwords - Laravel provides a class called “Hash” class which provides secure Bcrypt hashing. The password can be hashed in the following way.


The e-mail templates are loaded in the same way as views, which means you can use the Blade syntax and 
inject data into your templates. The following is the syntax of the send function.

Syntax	void send(string|array $view, array $data, Closure|string $callback)

Security is important feature while designing web applications. It assures the users of the website that their data is secured. 
Laravel provides various mechanisms to secure website. Some of the features are listed below -

Storing Passwords - Laravel provides a class called “Hash” class which provides secure Bcrypt hashing. The password can be hashed in the following way.

$password = Hash::make('secret');
make() function will take a value as argument and will return the hashed value. The hashed value can be checked using the check() function in the following way.

Hash::check('secret', $hashedPassword)
The above function will return Boolean value. It will return true if password matched or false otherwise.

Authenticating Users - The other main security features in Laravel is authenticating user and perform some action. 
Laravel has made this task easier and to do this we can use Auth::attempt method in the following way.

if (Auth::attempt(array('email' => $email, 'password' => $password))) {
   return Redirect::intended('home');
}






JSON or JavaScript Object Notation is a lightweight text-based open standard designed for human-readable data interchange. 
Conventions used by JSON are known to programmers, which include C, C++, Java, Python, Perl, etc.

JSON stands for JavaScript Object Notation.

The format was specified by Douglas Crockford.

It was designed for human-readable data interchange.

It has been extended from the JavaScript scripting language.

The filename extension is .json.

JSON Internet Media type is application/json.

The Uniform Type Identifier is public.json.

Uses of JSON:

It is used while writing JavaScript based applications that includes browser extensions and websites.

JSON format is used for serializing and transmitting structured data over network connection.

It is primarily used to transmit data between a server and web applications.

Web services and APIs use JSON format to provide public data.

It can be used with modern programming languages.

Characteristics of JSON:

JSON is easy to read and write.
It is a lightweight text-based interchange format.
JSON is language independent.

JSON supports the following two data structures -

Collection of name/value pairs - This Data Structure is supported by different programming languages.

Ordered list of values - It includes array, list, vector or sequence etc.
JSON format supports the following data types -


Type	Description
Number	double- precision floating-point format in JavaScript
String	double-quoted Unicode with backslash escaping
Boolean	true or false
Array	an ordered sequence of values
Value	it can be a string, a number, true or false, null etc
Object	an unordered collection of key:value pairs
Whitespace	can be used between any pair of tokens


Number
It is a double precision floating-point format in JavaScript and it depends on implementation.

Octal and hexadecimal formats are not used.

No NaN or Infinity is used in Number.

The following table shows the number types -

Type	Description
Integer	Digits 1-9, 0 and positive or negative
Fraction	Fractions like .3, .9
Exponent	Exponent like e, e+, e-, E, E+, E-
Syntax
var json-object-name = { string : number_value, .......}
Example
Example showing Number Datatype, value should not be quoted -

var obj = {marks: 97}
String
It is a sequence of zero or more double quoted Unicode characters with backslash escaping.

Character is a single character string i.e. a string with length 1.

The table shows string types -

Type	Description
"	double quotation
\	reverse solidus
/	solidus
b	backspace
f	form feed
n	new line
r	carriage return
t	horizontal tab
u	four hexadecimal digits
Syntax
var json-object-name = { string : "string value", .......}
Example
Example showing String Datatype -

var obj = {name: 'Amit'}
Boolean
It includes true or false values.

Syntax
var json-object-name = { string : true/false, .......}
Example
var obj = {name: 'Amit', marks: 97, distinction: true}
Array
It is an ordered collection of values.

These are enclosed in square brackets which means that array begins with .[. and ends with .]..

The values are separated by , (comma).

Array indexing can be started at 0 or 1.

Arrays should be used when the key names are sequential integers.

Syntax
[ value, .......]
Example
Example showing array containing multiple objects -

{
   "books": [
      { "language":"Java" , "edition":"second" },
      { "language":"C++" , "lastName":"fifth" },
      { "language":"C" , "lastName":"third" }
   ]
}
Object
It is an unordered set of name/value pairs.

Objects are enclosed in curly braces that is, it starts with '{' and ends with '}'.

Each name is followed by ':'(colon) and the name/value pairs are separated by , (comma).

The keys must be strings and should be different from each other.

Objects should be used when the key names are arbitrary strings.

Syntax
{ string : value, .......}
Example
Example showing Object -

{
   "id": "011A",
   "language": "JAVA",
   "price": 500,
}
Whitespace
It can be inserted between any pair of tokens. It can be added to make a code more readable. Example shows declaration with and without whitespace -

Syntax
{string:" ",....}
Example
var i = " sachin";
var j = " saurav"
null
It means empty type.

Syntax
null
Example
var i = null;

if(i == 1){
   document.write("<h1>value is 1</h1>");
}
else{
   document.write("<h1>value is null</h1>");
}
JSON Value
It includes -

number (integer or floating point)
string
boolean
array
object
null
Syntax
String | Number | Object | Array | TRUE | FALSE | NULL
Example
var i = 1;
var j = "sachin";
var k = null;
Creating Simple Objects
JSON objects can be created with JavaScript. Let us see the various ways of creating JSON objects using JavaScript -

Creation of an empty Object -
var JSONObj = {};
Creation of a new Object -
var JSONObj = new Object();
Creation of an object with attribute bookname with value in string, attribute price with numeric value. Attribute is accessed by using '.' Operator -

var JSONObj = { "bookname ":"VB BLACK BOOK", "price":500 };

JSON Schema is a specification for JSON based format for defining the structure of JSON data. It was written under IETF draft which expired in 2011. JSON Schema -

Describes your existing data format.
Clear, human- and machine-readable documentation.
Complete structural validation, useful for automated testing.
Complete structural validation, validating client-submitted data.
JSON Schema Validation Libraries
There are several validators currently available for different programming languages. Currently the most complete and compliant JSON Schema validator available is JSV.

Languages	Libraries
C	WJElement (LGPLv3)
Java	json-schema-validator (LGPLv3)
.NET	Json.NET (MIT)
ActionScript 3	Frigga (MIT)
Haskell	aeson-schema (MIT)
Python	Jsonschema
Ruby	autoparse (ASL 2.0); ruby-jsonschema (MIT)
PHP	php-json-schema (MIT). json-schema (Berkeley)
JavaScript	Orderly (BSD); JSV; json-schema; Matic (MIT); Dojo; Persevere (modified BSD or AFL 2.0); schema.js.

Keywords	Description
$schema	The $schema keyword states that this schema is written according to the draft v4 specification.


title	You will use this to give a title to your schema.
description	A little description of the schema.
type	The type keyword defines the first constraint on our JSON data: it has to be a JSON Object.

properties	Defines various keys and their value types, minimum and maximum values to be used in JSON file.

required	This keeps a list of required properties.

minimum	This is the constraint to be put on the value and represents minimum acceptable value.

exclusiveMinimum	If "exclusiveMinimum" is present and has boolean value true, the instance is valid if it is strictly greater than the value of "minimum".

maximum	This is the constraint to be put on the value and represents maximum acceptable value.

exclusiveMaximum	If "exclusiveMaximum" is present and has boolean value true, the instance is valid if it is strictly lower than the value of "maximum".

multipleOf	A numeric instance is valid against "multipleOf" if the result of the division of the instance by this keyword's value is an integer.

maxLength	The length of a string instance is defined as the maximum number of its characters.

XML:



JSON and XML are human readable formats and are language independent. They both have support for creation, reading and decoding in real world situations. We can compare JSON with XML, based on the following factors -

Verbose
XML is more verbose than JSON, so it is faster to write JSON for programmers.

Arrays Usage
XML is used to describe the structured data, which doesn't include arrays whereas JSON include arrays.

Parsing
JavaScript's eval method parses JSON. When applied to JSON, eval returns the described object.

Example
Individual examples of XML and JSON -

JSON
{
   "company": Volkswagen,
   "name": "Vento",
   "price": 800000
}
XML
<car>
   <company>Volkswagen</company>
   <name>Vento</name>
   <price>800000</price>
</car>
minLength	The length of a string instance is defined as the minimum number of its characters.
pattern	A string instance is considered valid if the regular expression matches the instance successfully.
null	empty
